// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios15.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name Zscaler
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import Combine
import Foundation
import MetricKit
import Network
import Swift
import UIKit
import WebKit
@_exported import Zscaler
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc public enum LogLevel : Swift.Int {
  case error = 0
  case info = 1
  case debug = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension Zscaler.LogLevel : Swift.CaseIterable {
  public typealias AllCases = [Zscaler.LogLevel]
  nonisolated public static var allCases: [Zscaler.LogLevel] {
    get
  }
}
@objc public class ZscalerSDKProxyInfo : ObjectiveC.NSObject {
  @objc final public let proxyHost: Swift.String
  @objc final public let proxyPort: Swift.Int
  @objc final public let username: Swift.String?
  @objc final public let password: Swift.String?
  @objc public init(host: Swift.String, port: Swift.Int, username: Swift.String?, password: Swift.String?)
  @objc deinit
}
public struct ZscalerSDKError : Swift.Error {
  public struct ErrorCode : Swift.RawRepresentable {
    public let rawValue: Swift.Int
    public init(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
  }
  public let code: Zscaler.ZscalerSDKError.ErrorCode
}
extension Zscaler.ZscalerSDKError : Foundation.CustomNSError {
  public static var errorDomain: Swift.String {
    get
  }
  public var errorCode: Swift.Int {
    get
  }
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
}
extension Zscaler.ZscalerSDKError.ErrorCode {
  public static let unknown: Zscaler.ZscalerSDKError.ErrorCode
  public static let invalidParameter: Zscaler.ZscalerSDKError.ErrorCode
  public static let noNetwork: Zscaler.ZscalerSDKError.ErrorCode
  public static let timeOut: Zscaler.ZscalerSDKError.ErrorCode
  public static let dnsFailure: Zscaler.ZscalerSDKError.ErrorCode
  public static let tunnelError: Zscaler.ZscalerSDKError.ErrorCode
  public static let permissionDenied: Zscaler.ZscalerSDKError.ErrorCode
  public static let tunnelAlreadyRunning: Zscaler.ZscalerSDKError.ErrorCode
  public static let tunnelStartPendingInSDK: Zscaler.ZscalerSDKError.ErrorCode
  public static let tunnelAuthenticationFailed: Zscaler.ZscalerSDKError.ErrorCode
  public static let connectionTerminatedWhileUpgrading: Zscaler.ZscalerSDKError.ErrorCode
  public static let tunnelUpgradeFailed: Zscaler.ZscalerSDKError.ErrorCode
}
extension Zscaler.ZscalerSDKError.ErrorCode {
  public static let csrSignFailure: Zscaler.ZscalerSDKError.ErrorCode
  public static let invalidTenantName: Zscaler.ZscalerSDKError.ErrorCode
  public static let noZpaService: Zscaler.ZscalerSDKError.ErrorCode
  public static let multipleZpaService: Zscaler.ZscalerSDKError.ErrorCode
  public static let revokeCertFailed: Zscaler.ZscalerSDKError.ErrorCode
  public static let tokenConfigNotFound: Zscaler.ZscalerSDKError.ErrorCode
  public static let jwkParseFailed: Zscaler.ZscalerSDKError.ErrorCode
  public static let customerKeyNotPresent: Zscaler.ZscalerSDKError.ErrorCode
  public static let customerKeyParseFailed: Zscaler.ZscalerSDKError.ErrorCode
  public static let unsupportedKeyType: Zscaler.ZscalerSDKError.ErrorCode
  public static let failedSignatureValidation: Zscaler.ZscalerSDKError.ErrorCode
  public static let tokenExpired: Zscaler.ZscalerSDKError.ErrorCode
  public static let tokenValidationFailed: Zscaler.ZscalerSDKError.ErrorCode
  public static let tokenClaimValidationFailed: Zscaler.ZscalerSDKError.ErrorCode
  public static let missingCertificateIdOauth2Client: Zscaler.ZscalerSDKError.ErrorCode
  public static let missingPrivateKeyOAuth2Client: Zscaler.ZscalerSDKError.ErrorCode
  public static let failureGeneratingClientAssertion: Zscaler.ZscalerSDKError.ErrorCode
  public static let failureGeneratingSamlAssertion: Zscaler.ZscalerSDKError.ErrorCode
  public static let failureSigningSamlAssertion: Zscaler.ZscalerSDKError.ErrorCode
  public static let failureSerializingSamlAssertion: Zscaler.ZscalerSDKError.ErrorCode
  public static let missingCertificateIdSamlConfig: Zscaler.ZscalerSDKError.ErrorCode
  public static let unsupportedCustomerTokenType: Zscaler.ZscalerSDKError.ErrorCode
  public static let hmacSecretFailed: Zscaler.ZscalerSDKError.ErrorCode
  public static let hmacValidationFailed: Zscaler.ZscalerSDKError.ErrorCode
  public static let missingSubInAccessToken: Zscaler.ZscalerSDKError.ErrorCode
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class ZscalerSDK : ObjectiveC.NSObject {
  @objc public static func sharedInstance() -> Zscaler.ZscalerSDK
  @objc public func status() -> Zscaler.ZscalerSDKTunnelStatus
  @objc public var proxyInfo: Zscaler.ZscalerSDKProxyInfo? {
    @objc get
  }
  @objc public var configuration: Zscaler.ZscalerSDKConfiguration {
    @objc get
    @objc set
  }
  @objc public func suspend()
  @objc public func resume()
  @objc public func setup(sessionConfiguration: Foundation.URLSessionConfiguration) -> Swift.Bool
  @objc @available(iOS 17, *)
  @_Concurrency.MainActor public func setup(websiteDataStore: WebKit.WKWebsiteDataStore) -> Swift.Bool
  @objc public func startPreLoginTunnel(appKey: Swift.String, deviceUdid: Swift.String) async throws
  @objc public func startZeroTrustTunnel(appKey: Swift.String, deviceUdid: Swift.String, accessToken: Swift.String) async throws
  @objc public func stopTunnel() async
  @objc public func resetProxyPortAndRequireSessionRecreation()
  @objc(exportLogsToDestination:) public func exportLogs(destination: Swift.String) -> Foundation.URL?
  @objc public func clearLogs()
  @objc public func getClientPublicIp() -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class ZscalerSDKTunnelType : ObjectiveC.NSObject {
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  public static func == (lhs: Zscaler.ZscalerSDKTunnelType, rhs: Zscaler.ZscalerSDKTunnelType) -> Swift.Bool
  @objc deinit
}
extension Zscaler.ZscalerSDKTunnelType {
  @objc public static let preLogin: Zscaler.ZscalerSDKTunnelType
  @objc public static let zeroTrust: Zscaler.ZscalerSDKTunnelType
  @objc public static let unknown: Zscaler.ZscalerSDKTunnelType
}
@objc @objcMembers public class ZscalerSDKConfiguration : ObjectiveC.NSObject {
  @objc public static var defaultConfiguration: Zscaler.ZscalerSDKConfiguration {
    @objc get
  }
  @objc final public let automaticallyConfigureRequests: Swift.Bool
  @objc final public let automaticallyConfigureWebviews: Swift.Bool
  @objc final public let useProxyAuthentication: Swift.Bool
  @objc final public let failIfDeviceCompromised: Swift.Bool
  @objc final public let blockZPAConnectionsOnTunnelFailure: Swift.Bool
  @objc final public let enableDebugLogsInConsole: Swift.Bool
  @objc final public let logLevel: Zscaler.LogLevel
  @objc public init(automaticallyConfigureRequests: Swift.Bool = false, automaticallyConfigureWebviews: Swift.Bool = false, useProxyAuthentication: Swift.Bool = false, failIfDeviceCompromised: Swift.Bool = false, blockZPAConnectionsOnTunnelFailure: Swift.Bool = false, enableDebugLogsInConsole: Swift.Bool = false, logLevel: Zscaler.LogLevel = .debug)
  @objc deinit
}
@objc public class ZscalerSDKTunnelStatus : ObjectiveC.NSObject {
  @objc public var tunnelConnectionState: Swift.String {
    get
  }
  @objc public var tunnelType: Zscaler.ZscalerSDKTunnelType {
    get
  }
  @objc public init(tunnelConnectionState: Swift.String, tunnelType: Zscaler.ZscalerSDKTunnelType)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class NotificationObjectConstants : ObjectiveC.NSObject {
  @objc public static let notificationNameKey: Swift.String
  @objc public static let notificationMessageKey: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc extension Foundation.NSNotification {
  @objc public static let ZscalerSDKTunnelDisconnected: Foundation.NSNotification.Name
  @objc public static let ZscalerSDKTunnelConnected: Foundation.NSNotification.Name
  @objc public static let ZscalerSDKTunnelReconnecting: Foundation.NSNotification.Name
  @objc public static let ZscalerSDKTunnelAuthenticationRequired: Foundation.NSNotification.Name
  @objc public static let ZscalerSDKTunnelResourceBlocked: Foundation.NSNotification.Name
  @objc public static let ZscalerSDKProxyStartFailed: Foundation.NSNotification.Name
}
extension Zscaler.LogLevel : Swift.Equatable {}
extension Zscaler.LogLevel : Swift.Hashable {}
extension Zscaler.LogLevel : Swift.RawRepresentable {}
